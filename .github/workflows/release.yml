name: Build and Release
# Automated build, sign, and release workflow

on:
  # Trigger on version tags (e.g., v1.0.4, v1.3, etc.)
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.4)'
        required: true
        type: string

# Ensure only one release workflow runs at a time
concurrency:
  group: release
  cancel-in-progress: false

# Explicit permissions for GitHub API access
permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      
    - name: Set version from input or tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_NAME=v$VERSION" >> $GITHUB_OUTPUT
          # Update package.json version
          npm version $VERSION --no-git-tag-version
        else
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT  
          echo "TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          # Update package.json to match tag
          npm version $VERSION --no-git-tag-version
        fi
        echo "Building version: $VERSION"
    
    # Import Apple certificates for code signing
    - name: Import Code-Signing Certificates
      uses: apple-actions/import-codesign-certs@v3
      with:
        # P12 file containing your Developer ID Application certificate
        p12-file-base64: ${{ secrets.APPLE_CERTIFICATES }}
        p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
    
    # Build and package the app with signing and notarization (multi-arch)
    - name: Build Electron app - ARM64
      run: npm run make -- --arch=arm64
      env:
        # Set CI flag to enable signing/notarization in forge config
        CI: true
        # Apple Developer credentials for notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # GitHub token for potential releases
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Preserve ARM64 DMG
      run: |
        # Rename ARM64 DMG to prevent overwrite
        if [ -f "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}.dmg" ]; then
          mv "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}.dmg" "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}-arm64.dmg"
          echo "Renamed ARM64 DMG"
        fi

    - name: Build Electron app - Intel (x64)
      run: npm run make -- --arch=x64
      env:
        # Set CI flag to enable signing/notarization in forge config
        CI: true
        # Apple Developer credentials for notarization
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # GitHub token for potential releases
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Preserve x64 DMG
      run: |
        # Rename x64 DMG for clarity
        if [ -f "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}.dmg" ]; then
          mv "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}.dmg" "out/make/Roon-Random-Album-${{ steps.version.outputs.VERSION }}-x64.dmg"
          echo "Renamed x64 DMG"
        fi
    
    # Find built files for release (multi-arch)
    - name: Find build artifacts
      id: artifacts
      run: |
        # Show what was actually built
        echo "Contents of out/ directory:"
        find out -type f -name "*.dmg" -o -name "*.zip" | sort
        
        # Find architecture-specific files (now properly named)
        DMG_ARM64=$(find out -name "*arm64*.dmg" | head -1)
        DMG_X64=$(find out -name "*x64*.dmg" | head -1)  
        ZIP_ARM64=$(find out -name "*darwin-arm64*.zip" | head -1)
        ZIP_X64=$(find out -name "*darwin-x64*.zip" | head -1)
        
        # Output findings
        echo "DMG_ARM64=$DMG_ARM64" >> $GITHUB_OUTPUT
        echo "DMG_X64=$DMG_X64" >> $GITHUB_OUTPUT
        echo "ZIP_ARM64=$ZIP_ARM64" >> $GITHUB_OUTPUT
        echo "ZIP_X64=$ZIP_X64" >> $GITHUB_OUTPUT
        
        echo "Found artifacts:"
        echo "  ARM64 DMG: $DMG_ARM64"
        echo "  x64 DMG: $DMG_X64"
        echo "  ARM64 ZIP: $ZIP_ARM64"
        echo "  x64 ZIP: $ZIP_X64"
    
    # Create GitHub Release using GitHub CLI (simplified approach)
    - name: Create Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release first (without assets)
        gh release create "${{ steps.version.outputs.TAG_NAME }}" \
          --title "Roon Random Album ${{ steps.version.outputs.VERSION }}" \
          --notes "## Roon Random Album ${{ steps.version.outputs.VERSION }}
        
        ### Downloads
        
        **macOS**
        - **Apple Silicon (M1/M2/M3/M4)**: Download \`Roon-Random-Album-${{ steps.version.outputs.VERSION }}-arm64.dmg\`
        - **Intel Macs**: Download \`Roon-Random-Album-${{ steps.version.outputs.VERSION }}-x64.dmg\`
        - **Alternative**: ZIP files also available (\`Roon-Random-Album-${{ steps.version.outputs.VERSION }}-arm64.zip\` for Apple Silicon, \`Roon-Random-Album-${{ steps.version.outputs.VERSION }}-x64.zip\` for Intel)
        
        ### Installation
        
        **DMG Method (Recommended):**
        1. Download the \`.dmg\` file
        2. Open the DMG and drag the app to your Applications folder
        3. Launch \"Roon Random Album\" from Applications
        
        **ZIP Method:**
        1. Download and extract the \`.zip\` file
        2. Copy the app to your Applications folder
        3. Launch \"Roon Random Album\" from Applications
        
        If blocked by Gatekeeper, go to System Preferences > Security & Privacy and click \"Open Anyway\"
        
        ### What's New
        
        See the [commit history](https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.TAG_NAME }}) for detailed changes in this release.
        
        ---
        
        **Requirements**: 
        - macOS 12.0 (Monterey) or later
        - Active Roon subscription and Roon Core running on your network
        
        **Note**: This app is signed and notarized for security and should launch without issues on modern macOS versions."

    # Upload assets separately (multi-arch support)  
    - name: Upload Release Assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Upload ARM64 DMG
        if [ -n "${{ steps.artifacts.outputs.DMG_ARM64 }}" ]; then
          echo "Uploading ARM64 DMG: ${{ steps.artifacts.outputs.DMG_ARM64 }}"
          gh release upload "${{ steps.version.outputs.TAG_NAME }}" "${{ steps.artifacts.outputs.DMG_ARM64 }}#Roon-Random-Album-${{ steps.version.outputs.VERSION }}-arm64.dmg" --clobber
        fi
        
        # Upload x64 DMG
        if [ -n "${{ steps.artifacts.outputs.DMG_X64 }}" ]; then
          echo "Uploading x64 DMG: ${{ steps.artifacts.outputs.DMG_X64 }}"
          gh release upload "${{ steps.version.outputs.TAG_NAME }}" "${{ steps.artifacts.outputs.DMG_X64 }}#Roon-Random-Album-${{ steps.version.outputs.VERSION }}-x64.dmg" --clobber
        fi
        
        # Upload ARM64 ZIP
        if [ -n "${{ steps.artifacts.outputs.ZIP_ARM64 }}" ]; then
          echo "Uploading ARM64 ZIP: ${{ steps.artifacts.outputs.ZIP_ARM64 }}"
          gh release upload "${{ steps.version.outputs.TAG_NAME }}" "${{ steps.artifacts.outputs.ZIP_ARM64 }}#Roon-Random-Album-${{ steps.version.outputs.VERSION }}-arm64.zip" --clobber
        fi
        
        # Upload x64 ZIP
        if [ -n "${{ steps.artifacts.outputs.ZIP_X64 }}" ]; then
          echo "Uploading x64 ZIP: ${{ steps.artifacts.outputs.ZIP_X64 }}"
          gh release upload "${{ steps.version.outputs.TAG_NAME }}" "${{ steps.artifacts.outputs.ZIP_X64 }}#Roon-Random-Album-${{ steps.version.outputs.VERSION }}-x64.zip" --clobber
        fi
    
    # Post-build summary
    - name: Build Summary
      run: |
        echo "‚úÖ Build completed successfully!"
        echo "üì¶ Version: ${{ steps.version.outputs.VERSION }}"
        echo "üè∑Ô∏è  Tag: ${{ steps.version.outputs.TAG_NAME }}"
        echo "üöÄ Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.TAG_NAME }}"